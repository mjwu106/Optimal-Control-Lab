{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Rockets","provenance":[{"file_id":"1HLksifLK_jYRwe392TQ5d-PzBTfvHLYu","timestamp":1656008989209}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"jhNUKYZhyMgA"},"source":["import sys\n","IN_COLAB = 'google.colab' in sys.modules\n","if IN_COLAB:\n","  !pip install -q pyomo\n","  !wget -N -q \"https://ampl.com/dl/open/ipopt/ipopt-linux64.zip\"\n","  !unzip -o -q ipopt-linux64\n","\n","import matplotlib.pyplot as plt\n","import numpy as np \n","import pyomo.environ as pyo"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CYZKt4YPJfxU"},"source":["# constants\n","m = 27648\n","l = 70\n","J = 1 / 16 * m * l**2\n","g = 9.8\n","Fmax = 2 * 845 * 1000\n","dmax = 5 * np.pi / 180\n","tmin = -20 * np.pi / 180\n","tmax = 20 * np.pi / 180\n","\n","# Define timestep and horizon\n","TS = 0.1\n","N = int(10 / TS)\n","\n","# number of states and inputs\n","nz = 4\n","nu = 2\n","\n","# state and input constraints\n","zMin = np.array([tmin, -100, -3000, -100])\n","zMax = np.array([tmax, 100, 0, 500])\n","uMin = np.array([0, -dmax])\n","uMax = np.array([Fmax, dmax])\n","\n","# initial condition and terminal constraints\n","v0 = 205.2\n","alt0 = 1228\n","t0 = 10 * np.pi / 180\n","z0Bar = np.array([t0, 0, -alt0, v0])\n","zNBar = np.array([0, 0, 0, 0])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o1PFr-r6Q7wi"},"source":["## PART A"]},{"cell_type":"markdown","metadata":{"id":"TbbR5iovdp_v"},"source":["### A1\n","\n","Not convex, since not all of the equality constraints are affine."]},{"cell_type":"markdown","metadata":{"id":"ggWphE91o78x"},"source":["### A2"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"vrq_y-lLMscS","executionInfo":{"status":"ok","timestamp":1636143668630,"user_tz":420,"elapsed":2262,"user":{"displayName":"Junseok Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkdDzN1BkSVqlsEksp7-8zHh4O23_DdYbnFx00-g=s64","userId":"02294955534841595840"}},"outputId":"acb14aaf-7f52-4f55-9021-9d49b575de82"},"source":["# Write your code here\n","\n","\n","def solve_nlp(N=N):\n","  \"\"\"Solve the NLP\"\"\"\n","  model = pyo.ConcreteModel()\n","  model.tidx = pyo.Set(initialize=range(0, N + 1))\n","  model.zidx = pyo.Set(initialize=range(0, nz))\n","  model.uidx = pyo.Set(initialize=range(0, nu))\n","\n","  model.z = pyo.Var(model.zidx, model.tidx)\n","  model.u = pyo.Var(model.uidx, model.tidx)\n","\n","  # Objective function\n","  # Tuning: we choose Q to be diagonal\n","  q = np.array([10, 10, 10, 10])\n","  objective_terms = [\n","      sum(q[i] * (model.z[i, t])**2 for i in model.zidx for t in model.tidx if t < N),  # sum of first term\n","      sum((model.u[1, t])**2 for t in model.tidx if t < N),  # sum of second term\n","      sum((model.u[0, t] / Fmax)**2 for t in model.tidx if t < N),  # sum of third term\n","  ]\n","  model.cost = pyo.Objective(expr=sum(objective_terms), sense=pyo.minimize)\n","\n","  # Dynamics constraints\n","  # theta(k+1)\n","  model.constraint2 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.z[0, t + 1] == model.z[0, t] + TS * (model.z[1, t])\n","                                     if t < N else pyo.Constraint.Skip)\n","  # omega(k+1)\n","  model.constraint3 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.z[1, t + 1] == model.z[1, t] + TS *\n","                                     (-l / (2 * J) * model.u[0, t] * pyo.sin(model.u[1, t]))\n","                                     if t < N else pyo.Constraint.Skip)\n","  # h(k+1)\n","  model.constraint4 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.z[2, t + 1] == model.z[2, t] + TS * (model.z[3, t])\n","                                     if t < N else pyo.Constraint.Skip)\n","  # v(k+1)\n","  model.constraint5 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.z[3, t + 1] == model.z[3, t] + TS *\n","                                     (g - 1 / m * model.u[0, t] * pyo.cos(model.u[1, t]))\n","                                     if t < N else pyo.Constraint.Skip)\n","\n","  # State constraints\n","  model.constraint13 = pyo.Constraint(model.zidx,\n","                                      model.tidx,\n","                                      rule=lambda model, i, t: model.z[i, t] <= zMax[i]\n","                                      if t <= N else pyo.Constraint.Skip)\n","  model.constraint14 = pyo.Constraint(model.zidx,\n","                                      model.tidx,\n","                                      rule=lambda model, i, t: model.z[i, t] >= zMin[i]\n","                                      if t <= N else pyo.Constraint.Skip)\n","\n","  # Input constraints\n","  model.constraint6 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.u[0, t] <= uMax[0] if t < N else pyo.Constraint.Skip)\n","  model.constraint7 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.u[0, t] >= uMin[0] if t < N else pyo.Constraint.Skip)\n","  model.constraint8 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.u[1, t] <= uMax[1] if t < N else pyo.Constraint.Skip)\n","  model.constraint9 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.u[1, t] >= uMin[1] if t < N else pyo.Constraint.Skip)\n","  # Initial condition\n","  model.constraint1 = pyo.Constraint(model.zidx, rule=lambda model, i: model.z[i, 0] == z0Bar[i])\n","\n","  # Terminal condition\n","  model.constraint12 = pyo.Constraint(model.zidx, rule=lambda model, i: model.z[i, N] == zNBar[i])\n","\n","  # Solve:\n","  results = pyo.SolverFactory('ipopt').solve(model).write()\n","\n","  return model\n","\n","\n","# Plot results\n","def plot_nlp(model):\n","  \"\"\"Plot the NLP results\"\"\"\n","  theta = [pyo.value(model.z[0, 0])]\n","  w = [pyo.value(model.z[1, 0])]\n","  h = [pyo.value(model.z[2, 0])]\n","  v = [pyo.value(model.z[3, 0])]\n","  F = [pyo.value(model.u[0, 0])]\n","  delta = [pyo.value(model.u[1, 0])]\n","\n","  for t in model.tidx:\n","    if t < N:\n","      theta.append(pyo.value(model.z[0, t + 1]))\n","      w.append(pyo.value(model.z[1, t + 1]))\n","      h.append(pyo.value(model.z[2, t + 1]))\n","      v.append(pyo.value(model.z[3, t + 1]))\n","    if t < N - 1:\n","      F.append(pyo.value(model.u[0, t + 1]))\n","      delta.append(pyo.value(model.u[1, t + 1]))\n","\n","  time = np.linspace(0, 10, N + 1)\n","  \n","  plt.figure()\n","  plt.subplot(4, 1, 1)\n","  plt.plot(time, theta)\n","  plt.xlabel('t')\n","  plt.ylabel('theta')\n","  plt.subplot(4, 1, 2)\n","  plt.plot(time, w)\n","  plt.xlabel('t')\n","  plt.ylabel('w')\n","  plt.subplot(4, 1, 3)\n","  plt.plot(time, h)\n","  plt.xlabel('t')\n","  plt.ylabel('h')\n","  plt.subplot(4, 1, 4)\n","  plt.plot(time, v)\n","  plt.xlabel('t')\n","  plt.ylabel('v')\n","  plt.show()\n","\n","  plt.figure()\n","  plt.subplot(2, 1, 1)\n","  plt.plot(time[:-1], F)\n","  plt.xlabel('t')\n","  plt.ylabel('F')\n","  plt.subplot(2, 1, 2)\n","  plt.plot(time[:-1], delta)\n","  plt.xlabel('t')\n","  plt.ylabel('delta')\n","  plt.show()\n","\n","\n","plot_nlp(solve_nlp())"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["# ==========================================================\n","# = Solver Results                                         =\n","# ==========================================================\n","# ----------------------------------------------------------\n","#   Problem Information\n","# ----------------------------------------------------------\n","Problem: \n","- Lower bound: -inf\n","  Upper bound: inf\n","  Number of objectives: 1\n","  Number of constraints: 1616\n","  Number of variables: 604\n","  Sense: unknown\n","# ----------------------------------------------------------\n","#   Solver Information\n","# ----------------------------------------------------------\n","Solver: \n","- Status: ok\n","  Message: Ipopt 3.12.13\\x3a Optimal Solution Found\n","  Termination condition: optimal\n","  Id: 0\n","  Error rc: 0\n","  Time: 1.020108938217163\n","# ----------------------------------------------------------\n","#   Solution Information\n","# ----------------------------------------------------------\n","Solution: \n","- number of solutions: 0\n","  number of solutions displayed: 0\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 4 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ibo81-Bzkb3x"},"source":["### A3\n","\n","Not possible, since it's infeasible"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eUcJJDAokeA7","executionInfo":{"status":"ok","timestamp":1636143669126,"user_tz":420,"elapsed":500,"user":{"displayName":"Junseok Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkdDzN1BkSVqlsEksp7-8zHh4O23_DdYbnFx00-g=s64","userId":"02294955534841595840"}},"outputId":"63ba80fc-bd96-44f9-92a0-90af379bbe1f"},"source":["solve_nlp(N // 2)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING: Loading a SolverResults object with a warning status into\n","    model.name=\"unknown\";\n","      - termination condition: infeasible\n","      - message from solver: Ipopt 3.12.13\\x3a Converged to a locally\n","        infeasible point. Problem may be infeasible.\n","# ==========================================================\n","# = Solver Results                                         =\n","# ==========================================================\n","# ----------------------------------------------------------\n","#   Problem Information\n","# ----------------------------------------------------------\n","Problem: \n","- Lower bound: -inf\n","  Upper bound: inf\n","  Number of objectives: 1\n","  Number of constraints: 816\n","  Number of variables: 304\n","  Sense: unknown\n","# ----------------------------------------------------------\n","#   Solver Information\n","# ----------------------------------------------------------\n","Solver: \n","- Status: warning\n","  Message: Ipopt 3.12.13\\x3a Converged to a locally infeasible point. Problem may be infeasible.\n","  Termination condition: infeasible\n","  Id: 200\n","  Error rc: 0\n","  Time: 0.41369056701660156\n","# ----------------------------------------------------------\n","#   Solution Information\n","# ----------------------------------------------------------\n","Solution: \n","- number of solutions: 0\n","  number of solutions displayed: 0\n"]},{"output_type":"execute_result","data":{"text/plain":["<pyomo.core.base.PyomoModel.ConcreteModel at 0x7f412e3ab280>"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"L6G3OMvuQ3QO"},"source":["## PART B"]},{"cell_type":"markdown","metadata":{"id":"WZwgHx1xpfNL"},"source":["### B1\n","\n","Convex, because the objective function is convex, the inequality constraints are convex, and the equality constraints are affine."]},{"cell_type":"markdown","metadata":{"id":"gcLHM25QpxPH"},"source":["### B2"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"-6ZwrnZ8OHb1","executionInfo":{"status":"ok","timestamp":1636143670605,"user_tz":420,"elapsed":1482,"user":{"displayName":"Junseok Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkdDzN1BkSVqlsEksp7-8zHh4O23_DdYbnFx00-g=s64","userId":"02294955534841595840"}},"outputId":"7ac10860-5ca8-4c0b-e80c-6d5c139a5155"},"source":["# Write your code here\n","\n","\n","def solve_qp(N=N):\n","  \"\"\"Solve the QP\"\"\"\n","  model = pyo.ConcreteModel()\n","  model.tidx = pyo.Set(initialize=range(0, N + 1))\n","  model.zidx = pyo.Set(initialize=range(0, nz))\n","  model.uidx = pyo.Set(initialize=range(0, nu))\n","\n","  model.z = pyo.Var(model.zidx, model.tidx)\n","  model.u = pyo.Var(model.uidx, model.tidx)\n","\n","  # Objective function\n","  # Tuning: choose Q to be diagonal\n","  q = np.array([10, 10, 10, 10])\n","  objective_terms = [\n","      sum(q[i] * (model.z[i, t])**2 for i in model.zidx for t in model.tidx if t < N),  # sum of first term\n","      sum((model.u[1, t])**2 for t in model.tidx if t < N),  # sum of second term\n","      sum((model.u[0, t] / Fmax)**2 for t in model.tidx if t < N),  # sum of third term\n","  ]\n","  model.cost = pyo.Objective(expr=sum(objective_terms), sense=pyo.minimize)\n","\n","  # Dynamics constraints\n","  # theta(k+1)\n","  model.constraint2 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.z[0, t + 1] == model.z[0, t] + TS * (model.z[1, t])\n","                                     if t < N else pyo.Constraint.Skip)\n","  # omega(k+1)\n","  model.constraint3 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.z[1, t + 1] == model.z[1, t] + TS *\n","                                     (-l / (2 * J) * model.u[1, t]) if t < N else pyo.Constraint.Skip)\n","  # h(k+1)\n","  model.constraint4 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.z[2, t + 1] == model.z[2, t] + TS * (model.z[3, t])\n","                                     if t < N else pyo.Constraint.Skip)\n","  # v(k+1)\n","  model.constraint5 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.z[3, t + 1] == model.z[3, t] + TS *\n","                                     (g - 1 / m * model.u[0, t]) if t < N else pyo.Constraint.Skip)\n","\n","  # State constraints\n","  model.constraint13 = pyo.Constraint(model.zidx,\n","                                      model.tidx,\n","                                      rule=lambda model, i, t: model.z[i, t] <= zMax[i]\n","                                      if t <= N else pyo.Constraint.Skip)\n","  model.constraint14 = pyo.Constraint(model.zidx,\n","                                      model.tidx,\n","                                      rule=lambda model, i, t: model.z[i, t] >= zMin[i]\n","                                      if t <= N else pyo.Constraint.Skip)\n","\n","  # Input constraints\n","  model.constraint6 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.u[0, t] <= uMax[0] if t < N else pyo.Constraint.Skip)\n","  model.constraint7 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.u[0, t] >= uMin[0] if t < N else pyo.Constraint.Skip)\n","  model.constraint8 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.u[1, t] <= model.u[0, t] * uMax[1]\n","                                     if t < N else pyo.Constraint.Skip)\n","  model.constraint9 = pyo.Constraint(model.tidx,\n","                                     rule=lambda model, t: model.u[1, t] >= model.u[0, t] * uMin[1]\n","                                     if t < N else pyo.Constraint.Skip)\n","  # Initial condition\n","  model.constraint1 = pyo.Constraint(model.zidx, rule=lambda model, i: model.z[i, 0] == z0Bar[i])\n","\n","  # Terminal condition\n","  model.constraint12 = pyo.Constraint(model.zidx, rule=lambda model, i: model.z[i, N] == zNBar[i])\n","\n","  # Now we can solve:\n","  results = pyo.SolverFactory('ipopt').solve(model).write()\n","\n","  return model\n","\n","\n","# plot results\n","def plot_qp(model):\n","  \"\"\"Plot the QP results\"\"\"\n","  theta = [pyo.value(model.z[0, 0])]\n","  w = [pyo.value(model.z[1, 0])]\n","  h = [pyo.value(model.z[2, 0])]\n","  v = [pyo.value(model.z[3, 0])]\n","  F = [pyo.value(model.u[0, 0])]\n","  delta = [pyo.value(model.u[1, 0]) / pyo.value(model.u[0, 0])]\n","\n","  for t in model.tidx:\n","    if t < N:\n","      theta.append(pyo.value(model.z[0, t + 1]))\n","      w.append(pyo.value(model.z[1, t + 1]))\n","      h.append(pyo.value(model.z[2, t + 1]))\n","      v.append(pyo.value(model.z[3, t + 1]))\n","    if t < N - 1:\n","      F.append(pyo.value(model.u[0, t + 1]))\n","      delta.append(pyo.value(model.u[1, t + 1]) / pyo.value(model.u[0, t + 1]))\n","\n","  time = np.linspace(0, 10, N + 1)\n","  \n","  plt.figure()\n","  plt.subplot(4, 1, 1)\n","  plt.plot(time, theta)\n","  plt.xlabel('t')\n","  plt.ylabel('theta')\n","  plt.subplot(4, 1, 2)\n","  plt.plot(time, w)\n","  plt.xlabel('t')\n","  plt.ylabel('w')\n","  plt.subplot(4, 1, 3)\n","  plt.plot(time, h)\n","  plt.xlabel('t')\n","  plt.ylabel('h')\n","  plt.subplot(4, 1, 4)\n","  plt.plot(time, v)\n","  plt.xlabel('t')\n","  plt.ylabel('v')\n","  plt.show()\n","\n","  plt.figure()\n","  plt.subplot(2, 1, 1)\n","  plt.plot(time[:-1], F)\n","  plt.xlabel('t')\n","  plt.ylabel('F')\n","  plt.subplot(2, 1, 2)\n","  plt.plot(time[:-1], delta)\n","  plt.xlabel('t')\n","  plt.ylabel('delta')\n","  plt.show()\n","\n","\n","plot_qp(solve_qp())"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["# ==========================================================\n","# = Solver Results                                         =\n","# ==========================================================\n","# ----------------------------------------------------------\n","#   Problem Information\n","# ----------------------------------------------------------\n","Problem: \n","- Lower bound: -inf\n","  Upper bound: inf\n","  Number of objectives: 1\n","  Number of constraints: 1616\n","  Number of variables: 604\n","  Sense: unknown\n","# ----------------------------------------------------------\n","#   Solver Information\n","# ----------------------------------------------------------\n","Solver: \n","- Status: ok\n","  Message: Ipopt 3.12.13\\x3a Optimal Solution Found\n","  Termination condition: optimal\n","  Id: 0\n","  Error rc: 0\n","  Time: 0.3961634635925293\n","# ----------------------------------------------------------\n","#   Solution Information\n","# ----------------------------------------------------------\n","Solution: \n","- number of solutions: 0\n","  number of solutions displayed: 0\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 4 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"VRbqZymQp0GF"},"source":["### B3\n","\n","1. *Roughly* 1.5 s for A2, 0.5 s for B2\n","2. The QP has faster convergence, guaranteed to be globally optimial"]}]}